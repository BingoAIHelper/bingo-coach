generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  firstName           String?
  lastName            String?
  email               String         @unique
  password            String
  role                String         @default("seeker")
  isCoach             Boolean        @default(false)
  bio                 String?
  location            String?
  phone               String?
  lastActive          DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  experience          String?
  expertise           String?        @db.Text
  specialties         String?        @db.Text
  yearsExperience     Int?
  industries          String?        @db.Text
  coachingStyle       String?
  hourlyRate          Float?
  availability        String?        @db.Text
  languages           String?        @db.Text
  certifications      String?        @db.Text
  rating              Float?
  totalReviews        Int            @default(0)
  applications        Application[]
  assessments         Assessment[]
  seekerMatches       CoachMatch[]   @relation("SeekerMatches")
  coach               Coach?
  seekerConversations Conversation[] @relation("SeekerConversations")
  documents           Document[]
  receivedMessages    Message[]      @relation("received_messages")
  sentMessages        Message[]      @relation("sent_messages")
  resumes             Resume[]
  assessmentCompleted Boolean    @default(false)

  @@map("users")
}

model Job {
  id           String        @id @default(uuid())
  title        String
  company      String
  location     String
  description  String        @db.Text
  requirements String        @db.Text
  salary       String?
  contactEmail String?
  contactPhone String?
  postedDate   DateTime      @default(now())
  applications Application[]

  @@map("jobs")
}

model Coach {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  bio            String?        @db.Text
  expertise      String?        @db.Text
  specialties    String?        @db.Text
  industries     String?        @db.Text
  languages      String?        @db.Text
  certifications String?        @db.Text
  profileImage   String?
  hourlyRate     Float?
  rating         Float?
  availability   String?        @db.Text
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String         @unique
  matches        CoachMatch[]
  user           User           @relation(fields: [userId], references: [id], onUpdate: NoAction)
  conversations  Conversation[]

  @@map("coaches")
}

model Resume {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String   @db.Text
  file      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("resumes")
}

model Assessment {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  sections    String     @db.Text
  completedAt DateTime   @default(now())
  status      String     @default("pending")
  user        User       @relation(fields: [userId], references: [id])
  messages    Message[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("assessments")
}

model Application {
  id            String   @id @default(uuid())
  userId        String
  jobId         String
  status        String
  coverLetter   String?  @db.Text
  resumeId      String?
  feedback      String?  @db.Text
  submittedDate DateTime @default(now())
  updatedAt     DateTime @updatedAt
  job           Job      @relation(fields: [jobId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@map("applications")
}

model Document {
  id             String    @id @default(uuid())
  userId         String
  title          String
  fileName       String
  fileUrl        String
  fileType       String
  fileSize       Int
  analyzeStatus  String    @default("pending")
  analyzeResults String?   @db.Text
  analyzeError   String?   @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onUpdate: NoAction)
  messages       Message[]

  @@map("documents")
}

model CoachMatch {
  id           String        @id @default(uuid())
  coachId      String
  seekerId     String
  status       String
  matchScore   Float
  matchReason  String?       @db.Text
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  coach        Coach         @relation(fields: [coachId], references: [id], onUpdate: NoAction, map: "coach_matches_coach_fkey")
  seeker       User          @relation("SeekerMatches", fields: [seekerId], references: [id], onUpdate: NoAction, map: "coach_matches_seeker_fkey")
  conversation Conversation?

  @@map("coach_matches")
}

model Conversation {
  id        String      @id @default(uuid())
  coachId   String
  seekerId  String
  matchId   String?     @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  coach     Coach       @relation(fields: [coachId], references: [id], onUpdate: NoAction)
  match     CoachMatch? @relation(fields: [matchId], references: [id], onUpdate: NoAction)
  seeker    User        @relation("SeekerConversations", fields: [seekerId], references: [id], onUpdate: NoAction)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  receiverId     String
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  assessmentId   String?
  documentId     String?
  type           String       @default("text")
  assessment     Assessment?  @relation(fields: [assessmentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "messages_assessment_fkey")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onUpdate: NoAction, map: "messages_conversation_fkey")
  document       Document?    @relation(fields: [documentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "messages_document_fkey")
  receiver       User         @relation("received_messages", fields: [receiverId], references: [id], onUpdate: NoAction, map: "messages_receiver_user_fkey")
  sender         User         @relation("sent_messages", fields: [senderId], references: [id], onUpdate: NoAction, map: "messages_sender_user_fkey")

  @@map("messages")
}
